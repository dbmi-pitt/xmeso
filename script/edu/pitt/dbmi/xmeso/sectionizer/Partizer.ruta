PACKAGE edu.pitt.dbmi.xmeso.sectionizer;

SCRIPT edu.pitt.dbmi.xmeso.model.Model;
SCRIPT edu.pitt.dbmi.xmeso.utilities.Utilities;

INT partizerGenNum = -1;
INT partizerPartNum = -1; 
INTLIST partizerPartNums;
INT partizerGenTotal = -1;
INT partizerPartNum4GenTotal = -1;
INT partizerPartNum4GenNum = -1;
INT partizerPartNumSeq = -1; 

STRING romanValueStore = "UNKNOWN";

BLOCK(ObserveDeIdBannar) Document {} { 
  DeIdBannarAnnotation {->LOG("Observing a DeIdBannar?")};
  EndOfDocument {->LOG("Observing a EndOfDocument?")};
  EndOfSection {->LOG("Observing a EndOfSection?")};
  FloatNum {->LOG("Observing a FloatNum?")};
  PartHeaderGenerator {->LOG("Observing a PartHeaderGenerator?")};
  PartNumber {->LOG("Observing a PartNumber?")};
  SectionHeader {->LOG("Observing a SectionHeader?")};
  Section {->LOG("Observing a Section?")};
}

BLOCK(PartIndicatorDetector) Document{-> ADDRETAINTYPE(BREAK)} {
    BREAK W{REGEXP("PARTS?|Parts?") -> MARK(PartIndicator)};
    PartIndicator {-> CALL(Utilities.CleanBeneathRutas)};
}

BLOCK(PartHeaderDetectorMultipleAnd) Document{-> REMOVERETAINTYPE(BREAK)} { 
    PartIndicator
        ((NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)})(COMMA|SEMICOLON))+
         (NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)})
         (W{REGEXP("and|AND|And")})
         (NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)})
                  { -> 
                       CREATE(PartHeaderGenerator, 1, 5, "genNumber" = -1, "genCount" = -1)};              
}

BLOCK(PartHeaderDetectorTwo) Document{-> REMOVERETAINTYPE(BREAK)} { 
    PartIndicator (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})
                  (W{REGEXP("and|AND|And")})
                  (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})
                  COLON
                  { -> 
                       CREATE(PartHeaderGenerator, 1, 5, "genNumber" = -1, "genCount" = -1)};              
    PartNumber {PARSE(partizerPartNum)-> SETFEATURE("partNumber", partizerPartNum)};
}

BLOCK(PartHeaderDetectorMultiple) Document{-> ADDFILTERTYPE(BREAK,COMMA,SEMICOLON)} { 
    PartIndicator 
        (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})+
        { -> 
   
             CREATE(PartHeaderGenerator, 1, 2, "genNumber" = -1, "genCount" = -1)};              
}

BLOCK(PartHeaderDetector) Document{} { 
        (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})
        (SPECIAL{REGEXP("-")}) 
        (CAP)+ COLON
        { -> 
             CREATE(PartHeaderGenerator, 1, 4, "genNumber" = -1, "genCount" = -1)};              
}

BLOCK(PartHeaderDetectorRoman) Document{->ADDRETAINTYPE(BREAK)} { 
        BREAK
        W{REGEXP("[IVX]{1,5}"), -PARTOF(PartHeaderGenerator)  
            -> MATCHEDTEXT(romanValueStore), 
               CREATE(RomanPartNumber, 2, 2, "romanValue" = romanValueStore)}
        PERIOD
        { -> CREATE(PartHeaderGenerator, 2, 3, "genNumber" = -1, "genCount" = -1)};              
}

BLOCK(PartNumberAssigner) Document{} {
     PartNumber {REGEXP("[0-9]{1,2}"), PARSE(partizerPartNum)-> SETFEATURE("partNumber", partizerPartNum)};
}

BLOCK(PartNumberAssignerRoman) Document{} {
     RomanPartNumber {REGEXP("I") -> SETFEATURE("partNumber", 1)};
     RomanPartNumber {REGEXP("II") -> SETFEATURE("partNumber", 2)};
     RomanPartNumber {REGEXP("III") -> SETFEATURE("partNumber", 3)};
     RomanPartNumber {REGEXP("IV") -> SETFEATURE("partNumber", 4)};
     RomanPartNumber {REGEXP("V") -> SETFEATURE("partNumber", 5)};
     RomanPartNumber {REGEXP("VI") -> SETFEATURE("partNumber", 6)};
     RomanPartNumber {REGEXP("VII") -> SETFEATURE("partNumber", 7)};
     RomanPartNumber {REGEXP("VIII") -> SETFEATURE("partNumber", 8)};
     RomanPartNumber {REGEXP("IX") -> SETFEATURE("partNumber", 9)};
     RomanPartNumber {REGEXP("X") -> SETFEATURE("partNumber", 10)};
     RomanPartNumber {REGEXP("XI") -> SETFEATURE("partNumber", 11)};
     RomanPartNumber {REGEXP("XII") -> SETFEATURE("partNumber", 12)};
     RomanPartNumber {REGEXP("XIII") -> SETFEATURE("partNumber", 13)};
     RomanPartNumber {REGEXP("XIV") -> SETFEATURE("partNumber", 14)};
     RomanPartNumber {REGEXP("XV") -> SETFEATURE("partNumber", 15)};
     RomanPartNumber {REGEXP("XVI") -> SETFEATURE("partNumber", 16)};
     RomanPartNumber {REGEXP("XVII") -> SETFEATURE("partNumber", 17)};
     RomanPartNumber {REGEXP("XVIII") -> SETFEATURE("partNumber", 18)};
     RomanPartNumber {REGEXP("XIX") -> SETFEATURE("partNumber", 19)};
     RomanPartNumber {REGEXP("XX") -> SETFEATURE("partNumber", 20)};
}

BLOCK(TallyPartHeaderGenerators) 
  Document {} {
  Document {COUNT(PartHeaderGenerator,partizerGenTotal)
    -> ASSIGN(partizerGenNum,1)};
  PartHeaderGenerator {
  ->
    SETFEATURE("genNumber", partizerGenNum),
    ASSIGN(partizerGenNum, partizerGenNum + 1)
    };
   PartHeaderGenerator {->CALL(Partizer.ProcessPartHeaderGenerator)};
}

BLOCK(ProcessPartHeaderGenerator) 
  PartHeaderGenerator {->GETFEATURE("genNumber",partizerGenNum)} {
  PartHeaderGenerator {
     COUNT(PartNumber,partizerPartNum4GenTotal)
  ->
    SETFEATURE("genCount",partizerPartNum4GenTotal),
    ASSIGN(partizerPartNumSeq,1)};
  PartNumber {PARTOF(PartHeaderGenerator)
  ->
  SETFEATURE("genNumber", partizerGenNum),
  SETFEATURE("genSeq", partizerPartNumSeq),
  ASSIGN(partizerPartNumSeq, partizerPartNumSeq + 1)
  };
}

BLOCK(CleanPartGeneratorsAndNumbers) Document {} {
    PartHeaderGenerator {->
            UNMARK(PartHeaderGenerator)};
    PartNumber {->
            UNMARK(PartNumber)};
    PartHeader {->
            SETFEATURE("sectionName","UNASSIGNED"),
            SETFEATURE("sectionLevel",-1)};
}

BLOCK(PartSectionNameAssigner) Section {} {
    STRING cachedSectionNameVar;
    INT cachedSectionLevelVar;
    Section{ -> 
                    GETFEATURE("name", cachedSectionNameVar),
                    GETFEATURE("level", cachedSectionLevelVar),
                    LOG("Cached variables from section")};
    Part {PARTOF(Section) ->  
                 SETFEATURE("sectionName", cachedSectionNameVar),
                 SETFEATURE("sectionLevel", cachedSectionLevelVar)            
             };
}

BLOCK(PartDiagnostics) Part{} {
   Part{-> LOG("Pulling part for diagnostics.")};
}

BLOCK(PartTrimmer) Part{} {
   Part{->TRIM(BREAK,SPACE,EndOfDocument,EndOfSection)};
}

