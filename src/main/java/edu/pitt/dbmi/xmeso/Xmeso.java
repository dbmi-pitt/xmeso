package edu.pitt.dbmi.xmeso;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// These org.apache.uima packages are installed via Maven
// the org package generated by JCasGen should be deleted
import org.apache.uima.analysis_engine.AnalysisEngine;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.cas.text.AnnotationFS;
import org.apache.uima.fit.factory.AnalysisEngineFactory;
import org.apache.uima.fit.util.JCasUtil;
import org.apache.uima.jcas.JCas;
import org.apache.uima.resource.ResourceInitializationException;
import org.apache.uima.util.InvalidXMLException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.sonar.runner.commonsio.FileUtils;
import org.xml.sax.SAXException;

import edu.pitt.dbmi.xmeso.i2b2.I2B2DemoDataWriter;
import edu.pitt.dbmi.xmeso.i2b2.I2b2DemoDataSourceManager;
// These Model packages are generated by JCasGen
import edu.pitt.dbmi.xmeso.model.Model.XmesoCaseForm;
import edu.pitt.dbmi.xmeso.model.Model.XmesoTumorForm;

public class Xmeso {

	private static final Logger logger = LoggerFactory.getLogger(Xmeso.class);
	
	// This is also the date format used in the linkage file nmvb_path_report_event_date.csv
	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

	private String xmesoDataDir;

	private final Map<String, String> visitDateMap = new HashMap<String, String>();

	private I2b2DemoDataSourceManager i2b2DemoDataSourceManager;

	private I2B2DemoDataWriter i2b2DemoDataWriter;

	private String reportId;
	private String mvbId;
	private String patientId;
	private String formattedDate;

	private AnalysisEngine engine;
	private File currentReportFile;
	
	private Properties xmesoProperties;

	// Entry point
	public static void main(String[] args) throws IOException {
		// Create instance of this class
		final Xmeso xmeso = new Xmeso();
		try {
			xmeso.execute();
		} catch (AnalysisEngineProcessException e) {
			e.printStackTrace();
		} catch (InvalidXMLException e) {
			e.printStackTrace();
		} catch (ResourceInitializationException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		}
	}

	public Xmeso() throws IOException {
		// Load the application.properties
		loadXmesoProperties();
	}
	
	private void loadXmesoProperties() throws IOException {
    	File file = new File("application.properties");
		FileInputStream fileInput = new FileInputStream(file);
		xmesoProperties = new Properties();
		xmesoProperties.load(fileInput);
    }

	public void execute() throws InvalidXMLException, ResourceInitializationException, IOException, AnalysisEngineProcessException, SAXException {
		// Get the xmeso_data path from application.properties
		xmesoDataDir = xmesoProperties.getProperty("xmeso_data");
		
		System.out.println("Input data folder path: " + xmesoDataDir);

		/**
		 * Report file and date mappings. E.g.
		 * 
		 * MVB0020_17639.txt: 1978-12-16
		   MVB0038_15907.txt: 1960-04-14
		   MVB0471_16685.txt: 1979-11-07
		 */
		mapVisitDates();
		
		i2b2DemoDataSourceManager = new I2b2DemoDataSourceManager();
		
		// Instantiate the data writer by passing xmesoProperties
		i2b2DemoDataWriter = new I2B2DemoDataWriter(xmesoProperties);
		
		i2b2DemoDataWriter.setDataSourceMgr(i2b2DemoDataSourceManager);

		// Delete old records (if exist) before inserting new ones
		i2b2DemoDataWriter.cleanOldRecordsIfExist();
		
		processReports();
		
		// Notify the users that how many records are added into each table
		i2b2DemoDataWriter.resultsSummary();

		i2b2DemoDataSourceManager.destroy();
	}

	private void mapVisitDates() throws IOException {
		/*
		 * nmvb_path_report_event_date.csv contains content looks like this:
		 * 
			REPORT_ID,NMVB_ID,PATIENT_NUM,EVENT_DATE
			00001,MVB0001,0001,2016-07-07
			00002,MVB0002,0002,2016-07-07
			00003,MVB0003,0003,2016-07-07
			00004,MVB0004,0004,2016-07-07
			00005,MVB0005,0005,2016-07-07
		 */
		File eventDatesFile = new File(xmesoDataDir + File.separator + "nmvb_path_report_event_date.csv");
		
		for (String line : FileUtils.readLines(eventDatesFile)) {
			if (line.contains("REPORT_ID")) {
				continue;
			}
			String[] fields = line.split(",");
			reportId = fields[0];
			mvbId = fields[1];
			patientId = fields[2];
			formattedDate = fields[3];
			// E.g. MVB0001_00001.txt
			String key = mvbId + "_" + reportId + ".txt";
			if (visitDateMap.get(key) != null) {
				System.err.println("Replacing an existing visit date at " + key);
			}
			visitDateMap.put(key, formattedDate);
		}
	}


	private void processReports() throws InvalidXMLException, ResourceInitializationException, IOException {
		//final String resourcePath = (new File("")).getAbsolutePath() + File.separator + "resources";
		//System.out.println("Setting resourcePath to " + resourcePath);
		//final String[] resourcePaths = { resourcePath };
		// "edu.pitt.dbmi.xmeso.XmesoEngine" is the descriptor name of that XML file
		// E.g. C:/Users/zhy19/workspace/xmeso/target/classes/edu/pitt/dbmi/xmeso/XmesoEngine.xml
		engine = AnalysisEngineFactory.createEngine("edu.pitt.dbmi.xmeso.XmesoEngine", 
				//"resourcePaths", resourcePaths, 
				"lowMemoryProfile", false);
		// All report files inside the "reports" folder
		File inputDirectory = new File(xmesoDataDir + File.separator + "reports");
		
		// Should only process reports that are listed in the nmvb_path_report_event_date.csv?
		// This file system based looping has to be consistent with the csv records
		File[] inputFiles = inputDirectory.listFiles();
		// Process each individual report file
		for (File inputFile : inputFiles) {
			currentReportFile = inputFile;
			processReport();
		}
		
		System.out.println("Finished processing all reports.");
	}
	
	/**
	 * Process the current report file
	 */
	private void processReport() {
		String content;
		try {
			cachePatientAndVisitFromName(currentReportFile.getName());
			content = FileUtils.readFileToString(currentReportFile);
			JCas jCas = engine.newJCas();
			// Extract information from this current report content (text to be analyzed)
			jCas.setDocumentText(content + "\n$\n");
			engine.process(jCas);
			populateCas(jCas);
			
			System.out.println("Successfully processed report #" + reportId);
		} catch (Exception e) {
			System.err.println("Failed to process report #" + reportId);
		}
	}

	private void cachePatientAndVisitFromName(String name) {
		Pattern nameExtractionPattern = Pattern.compile("MVB(\\d{4})_(\\d{5})");
		Matcher matcher = nameExtractionPattern.matcher(name);
		if (matcher.find()) {
			patientId = matcher.group(1);
			reportId = matcher.group(2);
		}
	}

	private void populateCas(JCas jCas) throws ParseException, IOException {
		// Establish the patient
		i2b2DemoDataWriter.setPatientNum(Integer.parseInt(patientId));
		// Fetch existing patient info if exists, otherwise create a fake patient record
		i2b2DemoDataWriter.fetchOrCreatePatient();
		// Use report ID as the visit number (`ENCOUNTER_NUM` in VISIT_DIMENSION table)
		i2b2DemoDataWriter.setVisitNum(Integer.parseInt(reportId));
		// E.g. MVB0646_14960.txt
		String eventKey = currentReportFile.getName();
		// This is the date string parsed from the linkage table, yyyy-MM-dd format
		String formattedDate = this.visitDateMap.get(eventKey);
		// Now we convert the String into Date type
		Date visitDate = dateFormat.parse(formattedDate);
		// Without formatting, outputting visitDate (Date type) directly will give us this: Thu May 10 00:00:00 EDT 1984
		// dateFormat.format(visitDate) will give us the desired string format: 1984-05-10
		logger.debug("visit date ------- " + dateFormat.format(visitDate));
		
		i2b2DemoDataWriter.setVisitDate(visitDate);
		
		// Create new visit record of the current report
		i2b2DemoDataWriter.createVisit();

		// On this cycle we will extract six Data Elements over the report set:
		//
		// Case level (whole report) information:
		//		    - Ultrastructural Findings
		//		    - Lymph Nodes Examined
		//		    - Special Stain Profile
		// Part (report part in each section) Level:
		//		    - Histopathologic Type
		//		    - Tumor Configuration
		//		    - Tumor Differentiation

		// Case level information
		for (AnnotationFS caseFormFs : JCasUtil.select(jCas, XmesoCaseForm.class)) {
			XmesoCaseForm caseForm = (XmesoCaseForm) caseFormFs;
			String lymphNodesExamined = caseForm.getLymphNodesExamined();
			String specialStain = caseForm.getSpecialStain();
			String ultraStructuralFindings = caseForm.getUltrastructuralFindings();

			logger.debug("============================DEBUGGING============================");
			logger.debug("lymphNodesExamined = " + lymphNodesExamined);
			logger.debug("specialStain = " + specialStain);
			logger.debug("ultraStructuralFindings = " + ultraStructuralFindings);

			// A concept found in one report may also appear in another report
			// That's why we "fetch or create" to reuse previously added concepts
			i2b2DemoDataWriter.fetchOrCreateConcept(lymphNodesExamined);
			i2b2DemoDataWriter.fetchOrCreateConcept(specialStain);
			i2b2DemoDataWriter.fetchOrCreateConcept(ultraStructuralFindings);

			// Here we use report id as the encounter number
			// The 0L means the number zero of type long, we'll increase the instance number using the currentPartNumber 
			// Won't be able to reuse previously added observation fact even if 
			// it's the same patient, same report, same concept code, same provider, same modifier, same start date.
			// Because the instance_num will always be different, and all these fields consist of the primary keys
			i2b2DemoDataWriter.createObservation(Integer.parseInt(patientId), Integer.parseInt(reportId), lymphNodesExamined, 0L);
			i2b2DemoDataWriter.createObservation(Integer.parseInt(patientId), Integer.parseInt(reportId), specialStain, 0L);
			i2b2DemoDataWriter.createObservation(Integer.parseInt(patientId), Integer.parseInt(reportId), ultraStructuralFindings, 0L);
		}

		// TumorForm information

		for (AnnotationFS tumorFormFS : JCasUtil.select(jCas, XmesoTumorForm.class)) {
			XmesoTumorForm tumorForm = (XmesoTumorForm) tumorFormFS;
			long currentPartNumber = Long.parseLong(tumorForm.getCurrentPart() + "");
			
			String tumorSiteCode = tumorForm.getTumorSite();
			
			String histologicTypeCode = tumorForm.getHistopathologicalType();
			String tumorConfigurationCode = tumorForm.getTumorConfiguration();
			String tumorDifferentiationCode = tumorForm.getTumorDifferentiation();
			
			// Kevin only used this tumorSiteCode when he was debugging in an unused function
			// So I moved it here as part of the debugging
			logger.debug("tumorSiteCode = " + tumorSiteCode);
			logger.debug("histologicTypeCode = " + histologicTypeCode);
			logger.debug("tumorConfigurationCode = " + tumorConfigurationCode);
			logger.debug("tumorDifferentiationCode = " + tumorDifferentiationCode);

			i2b2DemoDataWriter.fetchOrCreateConcept(histologicTypeCode);
			i2b2DemoDataWriter.fetchOrCreateConcept(tumorConfigurationCode);
			i2b2DemoDataWriter.fetchOrCreateConcept(tumorDifferentiationCode);

			// The instance number starts from 0L, we'll increase it using the currentPartNumber 
			i2b2DemoDataWriter.createObservation(Integer.parseInt(patientId), Integer.parseInt(reportId), histologicTypeCode, currentPartNumber);
			i2b2DemoDataWriter.createObservation(Integer.parseInt(patientId), Integer.parseInt(reportId), tumorConfigurationCode, currentPartNumber);
			i2b2DemoDataWriter.createObservation(Integer.parseInt(patientId), Integer.parseInt(reportId), tumorDifferentiationCode, currentPartNumber);
		}

	}

}