PACKAGE edu.pitt.dbmi.xmeso.sectionizer;

SCRIPT edu.pitt.dbmi.xmeso.model.Model;
SCRIPT edu.pitt.dbmi.xmeso.utilities.Utilities;

INT partizerGenNum = -1;
INT partizerPartNum = -1; 
INTLIST partizerPartNums;
INT partizerGenTotal = -1;
INT partizerPartNum4GenTotal = -1;
INT partizerPartNum4GenNum = -1;
INT partizerPartNumSeq = -1; 

BLOCK(ObserveDeIdBannar) Document {} { 
  DeIdBannarAnnotation {->LOG("Observing a DeIdBannar?")};
  EndOfDocument {->LOG("Observing a EndOfDocument?")};
  EndOfSection {->LOG("Observing a EndOfSection?")};
  FloatNum {->LOG("Observing a FloatNum?")};
  PartHeaderGenerator {->LOG("Observing a PartHeaderGenerator?")};
  PartNumber {->LOG("Observing a PartNumber?")};
  SectionHeader {->LOG("Observing a SectionHeader?")};
  Section {->LOG("Observing a Section?")};
}

BLOCK(PartIndicatorDetector) Document{} {
    Document {-> ADDRETAINTYPE(BREAK)};
                 BREAK W{REGEXP("PARTS?|Parts?") -> MARK(PartIndicator)};
    PartIndicator {-> CALL(Utilities.CleanBeneathRutas)};
}

BLOCK(PartHeaderDetector) Document{} { 
    PartIndicator ((NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)}) (COMMA|SEMICOLON)?)+
                  (W{REGEXP("and|AND|And")->LOG("GOT and")} (NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)}))?
                  { -> LOG("Got a PartHeaderGenerator"),
                       CREATE(PartHeaderGenerator, 1, 3, "genNumber" = -1, "genCount" = -1)};              
    PartNumber {PARSE(partizerPartNum)-> SETFEATURE("partNumber", partizerPartNum)};
}

//BLOCK(PartHeaderDetector) Document{->
//                ADDFILTERTYPE(CAP,COMMA,CW,PERIOD,SPECIAL,SW,BREAK),
//                ADDRETAINTYPE(NUM,PartIndicator,PartHeaderGenerator,PartNumber)} { 
//  PartIndicator (NUM{->MARK(PartNumber)}|BREAK)+ COLON? {
// ->
//  CREATE(PartHeaderGenerator, 1, 3, "genNumber" = -1, "genCount" = -1)};
//  PartNumber {PARSE(partizerPartNum)->SETFEATURE("partNumber", partizerPartNum)};
//}

BLOCK(TallyPartHeaderGenerators) 
  Document {} {
  Document {COUNT(PartHeaderGenerator,partizerGenTotal)
    -> ASSIGN(partizerGenNum,1)};
  PartHeaderGenerator {
  ->
    SETFEATURE("genNumber", partizerGenNum),
    ASSIGN(partizerGenNum, partizerGenNum + 1)
    };
   PartHeaderGenerator {->CALL(Partizer.ProcessPartHeaderGenerator)};
}

BLOCK(ProcessPartHeaderGenerator) 
  PartHeaderGenerator {->GETFEATURE("genNumber",partizerGenNum)} {
  PartHeaderGenerator {
     COUNT(PartNumber,partizerPartNum4GenTotal)
  ->
    SETFEATURE("genCount",partizerPartNum4GenTotal),
    ASSIGN(partizerPartNumSeq,1)};
  PartNumber {PARTOF(PartHeaderGenerator)
  ->
  SETFEATURE("genNumber", partizerGenNum),
  SETFEATURE("genSeq", partizerPartNumSeq),
  ASSIGN(partizerPartNumSeq, partizerPartNumSeq + 1)
  };
}

BLOCK(CleanPartGeneratorsAndNumbers) Document {} {
    PartHeaderGenerator {->
//            LOG("Unmarking a generator"),
            UNMARK(PartHeaderGenerator)};
    PartNumber {->
//            LOG("Unmarking a PartNumber"),
            UNMARK(PartNumber)};
    PartHeader {->
//            LOG("Modifying PartHeader Features"),
            SETFEATURE("sectionName","UNASSIGNED"),
            SETFEATURE("sectionLevel",-1)};
}

BLOCK(PartSectionNameAssigner) Section {} {
    STRING cachedSectionNameVar;
    INT cachedSectionLevelVar;
    Section{ -> 
                    GETFEATURE("name", cachedSectionNameVar),
                    GETFEATURE("level", cachedSectionLevelVar),
                    LOG("Cached variables from section")};
    Part {PARTOF(Section) ->  
                 SETFEATURE("sectionName", cachedSectionNameVar),
                 SETFEATURE("sectionLevel", cachedSectionLevelVar)            
             };
}

BLOCK(PartDiagnostics) Part{} {
   Part{-> LOG("Pulling part for diagnostics.")};
}

BLOCK(PartTrimmer) Part{} {
   Part{->TRIM(BREAK,SPACE,EndOfDocument,EndOfSection)};
}

