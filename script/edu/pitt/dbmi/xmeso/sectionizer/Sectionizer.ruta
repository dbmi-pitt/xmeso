PACKAGE edu.pitt.dbmi.xmeso.sectionizer;

SCRIPT edu.pitt.dbmi.xmeso.model.Model;
SCRIPT edu.pitt.dbmi.xmeso.utilities.Utilities;

//
// Section Header Discovery
//
// Here we add a subsumption mechanism for cases like 
// "Final Diagnosis" vs "Diagnosis".  Subsumbed pass two
// headers are not considered any further
// 
// A WORDTABLE is simply a comma-separated file (.csv), 
// which actually uses semicolons for separation of the entries.
WORDTABLE sectionHeadersPassOne = 'sectionizer/section_headers_pass_one.csv';
WORDTABLE sectionHeadersPassTwo = 'sectionizer/section_headers_pass_two.csv';

BLOCK(SectionHeaderDetector) Document{} {
    // The whole document is searched for all occurrences of the entries of the first column of the given table 'sectionHeadersPassOne'.
    // For each occurrence, an annotation of the type SectionHeader is created and its feature 'name' is filled with 
    // the entry of the second column, and its feature 'level' is filled with the entry of the third column.
    Document{->MARKTABLE(SectionHeader, 1, sectionHeadersPassOne, true, 100, "", 1, "name" = 2, "level" = 3)};
     
    Document{->MARKTABLE(SubsumableSectionHeader, 1, sectionHeadersPassTwo, true, 100, "", 1, "name" = 2, "level" = 3)};
     
    SubsumableSectionHeader{-PARTOF(SectionHeader)-> 
        TRANSFER(SectionHeader), 
        UNMARK(SubsumableSectionHeader)
    };
        
    SubsumableSectionHeader{PARTOF(SectionHeader)-> UNMARK(SubsumableSectionHeader)};
    
    SectionHeader{-> SHIFT(SectionHeader,1,2)} COLON{-PARTOF(SectionHeader)};  
}

BLOCK(SectionHeaderFilter) Document{->ADDRETAINTYPE(BREAK,SectionHeader)} {
    ANY{-PARTOF(BREAK)} @SectionHeader {-> UNMARK(SectionHeader)};
}

//
// EndOfDocumentDetector
//
// Detect the end of document position.  Each document
// is given a dollar sign ending char at pipe load time
// this is annotated here
//
BLOCK(EndOfDocumentDetector) Document{} {
    // This rule annotates the last token of the document with the annotation EndOfDocument
    Document{->MARKLAST(EndOfDocument)};
    SPECIAL {REGEXP("\\$"), PARTOF(EndOfDocument) -> UNMARK(SPECIAL)};
}

//
// EndOfSectionDetector
//
// End of section is defined to end where the following
// section header begins
//
BLOCK(EndOfSectionDetector) Document{->ADDRETAINTYPE(BREAK)} {
    // The rule first searches for SectionHeader and then 
    // checks whether there is a BREAK in front of the matched word.
    BREAK @SectionHeader {-> 
//        LOG("Marking EndOfSection"),
        MARK(EndOfSection, 1)
    };
        
    EndOfSection {-AFTER(SectionHeader) -> 
//        LOG("UnMarking EndOfSection"),
        UNMARK(EndOfSection)
    };
}

//
// SectionDetector
//
// Text between a SectionHeader and a SectionEnd is
// Section text.
//
BLOCK(SectionDetector) Document{} {
    STRING cachedSectionName;
    INT cachedSectionLevel;
    
    SectionHeader{-> 
        GETFEATURE("name", cachedSectionName),
        GETFEATURE("level", cachedSectionLevel)
    };
    
    (ANY|FloatNum|UOM|XmesoSize|BREAK)+? {-PARTOF(Section)}
    (EndOfSection | EndOfDocument){-> 
//      LOG("Creating section " + cachedSectionName),
        CREATE(Section, 2, 3, "name" = cachedSectionName, "level" = cachedSectionLevel)
    };
}

