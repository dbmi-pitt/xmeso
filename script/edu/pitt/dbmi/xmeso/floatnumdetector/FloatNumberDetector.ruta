PACKAGE edu.pitt.dbmi.xmeso.floatnumdetector;

SCRIPT edu.pitt.dbmi.xmeso.model.Model;

BLOCK(DetectFloatNum) Document{->RETAINTYPE(SPACE)} {
  NUM+ PERIOD NUM+{-> MARK(FloatNum, 1, 3)};
  NUM {PARTOF(FloatNum)-> UNMARK(NUM,true)};
  PERIOD {PARTOF(FloatNum)-> UNMARK(PERIOD,true)};
}

BLOCK(DetectUom) Document{->RETAINTYPE(SPACE)} {
    (NUM|FloatNum) SPACE+?    
    @W{REGEXP("[cm]m",true),-PARTOF(UOM)->MARK(UOM)} 
    ANY{-PARTOF(W)};
}

BLOCK(SizeDetection) Document{->RETAINTYPE(FloatNum,UOM)} {
    FLOAT dimensionOne;
    FLOAT dimensionTwo;
    FLOAT dimensionThree;
    FLOAT dimensionMaximum = -1.0;
    STRING unitOfMeasure;
    FloatNum{PARSE(dimensionOne)} 
    W{REGEXP("x")} 
    FloatNum{PARSE(dimensionTwo)} 
    W{REGEXP("x")} 
    FloatNum{PARSE(dimensionThree)} 
    UOM{-> MATCHEDTEXT(unitOfMeasure), 
      CREATE(XmesoSize, 1, 6,
        "codedPenalty" = 1, 
        "maxDim" = dimensionMaximum, 
        "dimOne" = dimensionOne, 
        "dimTwo" = dimensionTwo, 
        "dimThree" = dimensionThree, 
        "uom" = unitOfMeasure)};
}



BLOCK(MaximumSizeCalculator) XmesoSize{} {
    XmesoSize.dimOne > XmesoSize.maxDim{-> 
        XmesoSize.maxDim = XmesoSize.dimOne};
    XmesoSize.dimTwo > XmesoSize.maxDim{-> 
        XmesoSize.maxDim = XmesoSize.dimTwo};
    XmesoSize.dimThree > XmesoSize.maxDim{-> 
        XmesoSize.maxDim = XmesoSize.dimThree};
}

BLOCK(DetectTnm) Document{} {
   "[pc]?(Tis|T[0-4])\\s*(N[0-4])\\s*(M[0xX])" -> StageTNM, 1 = StageT, 2 = StageN, 3 = StageM;
}


