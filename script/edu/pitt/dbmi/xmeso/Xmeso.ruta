
//
// Xmeso
//
//
// Main Ruta Script for eXtraction from MESOthelioma Reports (Xmeso)
// the Natural Language Processing Component of the National Mesothelioma
// Virtual Bank (NMVB) project. 
//
// Calls
//     DeIdCleaner
//     QuantitativeValueDectector
//     Sectionizer 
//     Ner Detection
//     AvPair Dectection
//     Partizer
//     Sentence Detection
//     NegEx
//     Information Extraction
//
PACKAGE edu.pitt.dbmi.xmeso;

SCRIPT edu.pitt.dbmi.xmeso.model.Model;
SCRIPT edu.pitt.dbmi.xmeso.utilities.Utilities;
SCRIPT edu.pitt.dbmi.xmeso.deidcleaner.DeidCleaner;
SCRIPT edu.pitt.dbmi.xmeso.quantitative.QuantitativeValueDetector;
SCRIPT edu.pitt.dbmi.xmeso.sectionizer.Sectionizer;
SCRIPT edu.pitt.dbmi.xmeso.sectionizer.Partizer;
SCRIPT edu.pitt.dbmi.xmeso.ner.Ner;
SCRIPT edu.pitt.dbmi.xmeso.avpairs.AvPairDetector;

// UimaFit imports - the src/main/java annotation implementations, not Ruta
UIMAFIT edu.pitt.dbmi.xmeso.negex.NegExAnnotationEngine;
UIMAFIT edu.pitt.dbmi.xmeso.partizer.PartizerAnnotationEngine;
UIMAFIT edu.pitt.dbmi.xmeso.negex.SentenceBoundaryDetectionEngine;
UIMAFIT edu.pitt.dbmi.xmeso.negex.SentenceTokenizationEngine;
UIMAFIT edu.pitt.dbmi.xmeso.partizer.SectionCreatorAnnotationEngine;
UIMAFIT edu.pitt.dbmi.xmeso.partizer.PartCreatorAnnotationEngine;
UIMAFIT edu.pitt.dbmi.xmeso.ie.InformationExtractorAnnotationEngine;

// Disables all text generated by the PITT DeIdentifier 
// while is assumed to have been run on the Surgical Pathology input desk
// The CALL action initiates the execution of a different script file or script block. 
// Currently, only complete script files are supported.
// Here the script block of DetectDeId in DeidCleaner.ruta script is executed
Document{->CALL(DeidCleaner.DetectDeId)};
// Once DeIdBannarAnnotation is annotated, UNMARK all annotations in that text
DeIdBannarAnnotation{->CALL(Utilities.CleanBeneathRutas)};

// Conflates floating point values, determines sizes as anchored by UOM (Units of measurement)
// Important cleaning step to increase accuracy of part number detection later
Document{->CALL(QuantitativeValueDetector.DetectFloatNum)};
Document{->CALL(QuantitativeValueDetector.DetectUom)};
Document{->CALL(QuantitativeValueDetector.SizeDetection)};
XmesoSize{->CALL(QuantitativeValueDetector.MaximumSizeCalculator)};
XmesoSize{->CALL(Utilities.CleanBeneathRutas)};
XmesoSize{->CALL(Utilities.CleanBeneathXmeso)};

// Uses mesothelioma derived gazetter of section headers to delineate section text with the report
// Sections are weighted by "importance"
// Possible section headers are in the dictionary file
Document{->CALL(Sectionizer.SectionHeaderDetector)};
Document{->CALL(Sectionizer.SectionHeaderFilter)};
SectionHeader{->CALL(Utilities.CleanBeneathRutas)};    
Document{->CALL(Sectionizer.EndOfDocumentDetector)};
EndOfDocument{->CALL(Utilities.CleanBeneathRutas)};
Document{->CALL(Sectionizer.EndOfSectionDetector)};
// Execute the SectionCreatorAnnotationEngine defined in src/main/java/edu/pitt/dbmi/xmeso/partizer/SectionCreatorAnnotationEngine.java
Document{->EXEC(SectionCreatorAnnotationEngine, {Section})};

// NER (Named Entity Recognition)
// A series of gazetters generated via Xmeso TermExtractor (Python program)
Document{->CALL(Ner.NameEntityHistologicalType)};
Document{->CALL(Ner.NameEntityImmunohistochemicalProfile)};
Document{->CALL(Ner.NameEntityTumorSite)};
Document{->CALL(Ner.NameEntitySurgicalProcedure)};
Document{->CALL(Ner.NameEntityTumorConfiguration)};
Document{->CALL(Ner.NameEntityTumorDifferentiation)};
Document{->CALL(Ner.NameEntityUltrastructuralFindings)};

// Heuristic rules designed to fill in Yes/No slots of the target templates.
// Currently Lymph Nodes and Special Stains are searched
Document{->CALL(AvPairDetector.DetectLymphNodesExamined)};
Document{->CALL(AvPairDetector.DetectSpecialStainProfile)};

// Detects part specific text within each section
Document{->CALL(Partizer.PartIndicatorDetector)};
// Why NYU here?
Document{->CALL(Partizer.PartIndicatorDectorNyu)};

Document{->CALL(Partizer.PartHeaderDetectorMultipleAnd)};
Document{->CALL(Partizer.PartHeaderDetectorTwo)};
Document{->CALL(Partizer.PartHeaderDetectorMultiple)};
Document{->CALL(Partizer.PartHeaderDetector)};
Document{->CALL(Partizer.PartHeaderDetectorRoman)};
Document{->CALL(Partizer.PartNumberAssigner)};
Document{->CALL(Partizer.PartNumberAssignerRoman)};
Document{->CALL(Partizer.TallyPartHeaderGenerators)};
// Execute the PartCreatorAnnotationEngine defined in src/main/java/edu/pitt/dbmi/xmeso/partizer/PartCreatorAnnotationEngine.java
Document{->EXEC(PartCreatorAnnotationEngine, {Part})};

// LINGPipe's Sentence Detector along with tokenization beneath as a prerequisite for NegEx implementation
// Execute the SentenceBoundaryDetectionEngine defined in src/main/java/edu/pitt/dbmi/xmeso/negex/SentenceBoundaryDetectionEngine.java
Document{->EXEC(SentenceBoundaryDetectionEngine, {XmesoSentence})};
// Execute the SentenceBoundaryDetectionEngine defined in src/main/java/edu/pitt/dbmi/xmeso/negex/SentenceTokenizationEngine.java
Document{->EXEC(SentenceTokenizationEngine, {XmesoSentenceToken})};

// Implementation of Chapman's NegEx algorithm
// Execute the NegExAnnotationEngine defined in src/main/java/edu/pitt/dbmi/xmeso/negex/NegExAnnotationEngine.java
Document{->EXEC(NegExAnnotationEngine, {XmesoNamedEntity, XmesoNegatedConcept})};

// Assigns slots values to extraction target template.
// Theses are based on appearance of named entities in important sections
// Execute the InformationExtractorAnnotationEngine defined in src/main/java/edu/pitt/dbmi/xmeso/ie/InformationExtractorAnnotationEngine.java
Document{->EXEC(InformationExtractorAnnotationEngine, {XmesoCaseForm, XmesoTumorForm})};

