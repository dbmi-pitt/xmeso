PACKAGE edu.pitt.dbmi.xmeso.sectionizer;

SCRIPT edu.pitt.dbmi.xmeso.model.Model;
SCRIPT edu.pitt.dbmi.xmeso.utilities.Utilities;

INT partizerGenNum = -1;
INT partizerPartNum = -1; 
INTLIST partizerPartNums;
INT partizerGenTotal = -1;
INT partizerPartNum4GenTotal = -1;
INT partizerPartNum4GenNum = -1;
INT partizerPartNumSeq = -1; 

STRING romanValueStore = "UNKNOWN";

//
// Partizing
//
// In general is a complex piece of Xmeso.
// Pathologist use many idioms for delineating and
// enumerating specimen decompositions in the Gross room.
// In addition trying to over load a single Ruta rule for
// many expressive permutations is not a good idea.
// Subsequently Partizing consists of many rules called
// in a cascade.  Success by earlier rules cause the
// later rules to not fire.

//
// PartIndicatorDetector
//
// Finds "PARTS or Parts" at start of line
//
BLOCK(PartIndicatorDetector) Document{-> ADDRETAINTYPE(BREAK,SPECIAL)} {
    // If the matching condition and the additional regular expression are fulfilled, 
    // then the action is executed, which creates a new annotation of the type "PartIndicator"
    BREAK W{REGEXP("PARTS?|Parts?") -> MARK(PartIndicator)};
    PartIndicator{->CALL(Utilities.CleanBeneathRutas)};
}

//
// PartIndicatorDectorNyu, why NYU?
//
// Special case part detector for Nyu reports. Including
// it into the general report parser does not create spurious results
// An apostrophe at the beginning of the line followed by an
// up to two digit number makes that apostrophe a Part Indicator
//
BLOCK (PartIndicatorDectorNyu) Document{-> REMOVERETAINTYPE(BREAK),ADDRETAINTYPE(SPECIAL)} {
    SPECIAL{REGEXP("\""), -PARTOF(PartIndicator)-> MARK(PartIndicator)} NUM{REGEXP(".{1,2}")} PERIOD;
    PartIndicator{->CALL(Utilities.CleanBeneathRutas)};
}

//
// PartHeaderDetectorMultipleAnd
//
// PARTS 1, 2, 3, and 4
//
BLOCK(PartHeaderDetectorMultipleAnd) Document{-> REMOVERETAINTYPE(BREAK)} { 
    PartIndicator
        ((NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)})(COMMA|SEMICOLON))+
         (NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)})
         (W{REGEXP("and|AND|And")})
         (NUM{REGEXP(".{1,2}") -> CREATE(PartNumber)})
                  { -> 
                       CREATE(PartHeaderGenerator, 1, 5, "genNumber" = -1, "genCount" = -1)};              
}

//
// PartHeaderDetectorTwo
//
// Parts 1 and 2:
//
BLOCK(PartHeaderDetectorTwo) Document{-> REMOVERETAINTYPE(BREAK)} { 
    PartIndicator (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})
                  (W{REGEXP("and|AND|And")})
                  (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})
                  COLON
                  { -> 
                       CREATE(PartHeaderGenerator, 1, 5, "genNumber" = -1, "genCount" = -1)};              
    PartNumber {PARSE(partizerPartNum)-> SETFEATURE("partNumber", partizerPartNum)};
}

//
// PartHeaderDetectorMultiple
//
// Parts 1, 2, 4:
//
BLOCK(PartHeaderDetectorMultiple) Document{-> ADDFILTERTYPE(BREAK,COMMA,SEMICOLON)} { 
    PartIndicator 
        (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})+
        { -> 
   
             CREATE(PartHeaderGenerator, 1, 2, "genNumber" = -1, "genCount" = -1)};              
}


//
// PartHeaderDetector
//
// 1 - PROSTRATE:
//
BLOCK(PartHeaderDetector) Document{} { 
        (NUM{REGEXP(".{1,2}"), -PARTOF(PartHeaderGenerator) -> CREATE(PartNumber)})
        (SPECIAL{REGEXP("-")}) 
        (CAP)+ COLON
        { -> 
             CREATE(PartHeaderGenerator, 1, 4, "genNumber" = -1, "genCount" = -1)};              
}

//
// PartHeaderDetectorRoman
//
// Part II.
//
BLOCK(PartHeaderDetectorRoman) Document{->ADDRETAINTYPE(BREAK)} { 
        BREAK
        W{REGEXP("[IVX]{1,5}"), -PARTOF(PartHeaderGenerator)  
            -> MATCHEDTEXT(romanValueStore), 
               CREATE(RomanPartNumber, 2, 2, "romanValue" = romanValueStore)}
        PERIOD
        { -> CREATE(PartHeaderGenerator, 2, 3, "genNumber" = -1, "genCount" = -1)};              
}

//
// PartNumberAssigner
//
// PartNumber are sub annotation to the overall PartHeader
// annotation.  They are assigned numeric features based on the
// actual number text.  A common Ruta idiom.  Using PARSE and store
// to a local variable then assignment to a feature
//
BLOCK(PartNumberAssigner) Document{} {
     PartNumber {REGEXP("[0-9]{1,2}"), PARSE(partizerPartNum)-> SETFEATURE("partNumber", partizerPartNum)};
}

//
// PartNumberAssignerRoman
//
// Same as PartNumberAssigner except works with Roman
//
BLOCK(PartNumberAssignerRoman) Document{} {
     RomanPartNumber {REGEXP("I") -> SETFEATURE("partNumber", 1)};
     RomanPartNumber {REGEXP("II") -> SETFEATURE("partNumber", 2)};
     RomanPartNumber {REGEXP("III") -> SETFEATURE("partNumber", 3)};
     RomanPartNumber {REGEXP("IV") -> SETFEATURE("partNumber", 4)};
     RomanPartNumber {REGEXP("V") -> SETFEATURE("partNumber", 5)};
     RomanPartNumber {REGEXP("VI") -> SETFEATURE("partNumber", 6)};
     RomanPartNumber {REGEXP("VII") -> SETFEATURE("partNumber", 7)};
     RomanPartNumber {REGEXP("VIII") -> SETFEATURE("partNumber", 8)};
     RomanPartNumber {REGEXP("IX") -> SETFEATURE("partNumber", 9)};
     RomanPartNumber {REGEXP("X") -> SETFEATURE("partNumber", 10)};
     RomanPartNumber {REGEXP("XI") -> SETFEATURE("partNumber", 11)};
     RomanPartNumber {REGEXP("XII") -> SETFEATURE("partNumber", 12)};
     RomanPartNumber {REGEXP("XIII") -> SETFEATURE("partNumber", 13)};
     RomanPartNumber {REGEXP("XIV") -> SETFEATURE("partNumber", 14)};
     RomanPartNumber {REGEXP("XV") -> SETFEATURE("partNumber", 15)};
     RomanPartNumber {REGEXP("XVI") -> SETFEATURE("partNumber", 16)};
     RomanPartNumber {REGEXP("XVII") -> SETFEATURE("partNumber", 17)};
     RomanPartNumber {REGEXP("XVIII") -> SETFEATURE("partNumber", 18)};
     RomanPartNumber {REGEXP("XIX") -> SETFEATURE("partNumber", 19)};
     RomanPartNumber {REGEXP("XX") -> SETFEATURE("partNumber", 20)};
}

//
// TallyPartHeaderGenerators
//
// Each PartHeaderGenerator is enumerated sequentially 
// and assigned an enumeration value across the entire
// report.
//
//
BLOCK(TallyPartHeaderGenerators) 
  Document {} {
  Document {COUNT(PartHeaderGenerator,partizerGenTotal)
    -> ASSIGN(partizerGenNum,1)};
  PartHeaderGenerator {
  ->
    SETFEATURE("genNumber", partizerGenNum),
    ASSIGN(partizerGenNum, partizerGenNum + 1)
    };
   PartHeaderGenerator {->CALL(Partizer.ProcessPartHeaderGenerator)};
}

//
// ProcessPartHeaderGenerator
//
// Similarly each PartNumber within a PartHeaderGenerator is
// numbered sequentially.  So for
//
// PARTS 1, 3: 
//     xx
// PARTS 2, 4, and 5:
//     yy
//
// PartHeaderGenerator(genNumber=1,genCount=2)
// PartNumberGenerator(genNumber=2,genCount=3)
// PartNumber(genNumber=1,genSeq=1,partNumber=1)
// PartNumber(genNumber=1,genSeq=2,partNumber=3)
// PartNumber(genNumber=2,genSeq=1,partNumber=2)
// PartNumber(genNumber=2,genSeq=2,partNumber=4)
// PartNumber(genNumber=2,genSeq=3,partNumber=5)
//
// The final round of Partizing happens in the Java
// code.  There NERs are duplicated across common part
// spans.
//
BLOCK(ProcessPartHeaderGenerator) 
  PartHeaderGenerator {->GETFEATURE("genNumber",partizerGenNum)} {
  PartHeaderGenerator {
     COUNT(PartNumber,partizerPartNum4GenTotal)
  ->
    SETFEATURE("genCount",partizerPartNum4GenTotal),
    ASSIGN(partizerPartNumSeq,1)};
  PartNumber {PARTOF(PartHeaderGenerator)
  ->
  SETFEATURE("genNumber", partizerGenNum),
  SETFEATURE("genSeq", partizerPartNumSeq),
  ASSIGN(partizerPartNumSeq, partizerPartNumSeq + 1)
  };
}

//
// CleanPartGeneratorsAndNumbers
//
// PartHeaderGenerators are intermediate annotations
// and can be cleaned after use
//
BLOCK(CleanPartGeneratorsAndNumbers) Document {} {
    PartHeaderGenerator {->
            UNMARK(PartHeaderGenerator)};
    PartNumber {->
            UNMARK(PartNumber)};
    PartHeader {->
            SETFEATURE("sectionName","UNASSIGNED"),
            SETFEATURE("sectionLevel",-1)};
}

//
// PartSectionNameAssigner
//
// Feature propogation from Section to enclosing Parts
//
BLOCK(PartSectionNameAssigner) Section {} {
    STRING cachedSectionNameVar;
    INT cachedSectionLevelVar;
    Section{ -> 
                    GETFEATURE("name", cachedSectionNameVar),
                    GETFEATURE("level", cachedSectionLevelVar),
                    LOG("Cached variables from section")};
    Part {PARTOF(Section) ->  
                 SETFEATURE("sectionName", cachedSectionNameVar),
                 SETFEATURE("sectionLevel", cachedSectionLevelVar)            
             };
}

//
// PartDiagnostics
//
// Prints a message for each Part annotation
//
BLOCK(PartDiagnostics) Part{} {
   Part{-> LOG("Pulling part for diagnostics.")};
}

//
// PartTrimmer
//
// Correct any sloppy annotation bookkeeping that may have
// happened during Part detection.  Parts do not include
// section or document ends or trailing whitespace.
//
BLOCK(PartTrimmer) Part{} {
   Part{->TRIM(BREAK,SPACE,EndOfDocument,EndOfSection)};
}

