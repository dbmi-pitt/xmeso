PACKAGE edu.pitt.dbmi.xmeso.quantitative;

SCRIPT edu.pitt.dbmi.xmeso.model.Model;

//
// DetectFloatNum
//
// Floating point numbers 3.1426 need to be ignored later
// while doing Part Header detection
//
BLOCK(DetectFloatNum) Document{->RETAINTYPE(SPACE)} {
  NUM+ PERIOD NUM+{-> MARK(FloatNum, 1, 3)};
  NUM {PARTOF(FloatNum)-> UNMARK(NUM,true)};
  PERIOD {PARTOF(FloatNum)-> UNMARK(PERIOD,true)};
}

//
// DetectUom
//
// Units in Pathology Reports are usually either mm or cm
//
BLOCK(DetectUom) Document{->RETAINTYPE(BREAK,SPACE)} {
    (NUM|FloatNum) (SPACE|BREAK)+?    
    @W{REGEXP("[cm]m",true),-PARTOF(UOM)->MARK(UOM)} 
    ANY{-PARTOF(W)};
}

//
// SizeDetection
//
// Detects three dimensional size specifications typical
// to Gross sections of a Pathology Report
// 2.3 x 4.2 x 5.3 cm
//
FLOAT dimensionOne;
FLOAT dimensionTwo;
FLOAT dimensionThree;
FLOAT dimensionMaximum = -1.0;
STRING unitOfMeasure;
BLOCK(SizeDetection) Document{->RETAINTYPE(BREAK)} {
    (NUM{PARSE(dimensionOne)}|FloatNum{PARSE(dimensionOne)}) 
    W{REGEXP("x",true)}
    (NUM{PARSE(dimensionTwo)}|FloatNum{PARSE(dimensionTwo)}) 
    W{REGEXP("x",true)} 
    (NUM{PARSE(dimensionThree)}|FloatNum{PARSE(dimensionThree)}) 
    BREAK*
    UOM{-> MATCHEDTEXT(unitOfMeasure), 
      CREATE(XmesoSize, 1, 7,
        "codedPenalty" = 1, 
        "maxDim" = dimensionMaximum, 
        "dimOne" = dimensionOne, 
        "dimTwo" = dimensionTwo, 
        "dimThree" = dimensionThree, 
        "uom" = unitOfMeasure)};
}

//
// MaximumSizeCalculator
//
// Gathers the maximum dimension of a Size dimension
// triple
//
BLOCK(MaximumSizeCalculator) XmesoSize{} {
    XmesoSize.dimOne > XmesoSize.maxDim{-> 
        XmesoSize.maxDim = XmesoSize.dimOne};
    XmesoSize.dimTwo > XmesoSize.maxDim{-> 
        XmesoSize.maxDim = XmesoSize.dimTwo};
    XmesoSize.dimThree > XmesoSize.maxDim{-> 
        XmesoSize.maxDim = XmesoSize.dimThree};
}

//
// DetectTnm
//
// Preliminary rule for finding a AJCC TMN mention within the
// report.  This is a very complex metric and equally tricky
// parse.  
// 
BLOCK(DetectTnm) Document{} {
   "[pc]?(Tis|T[0-4])\\s*(N[0-4])\\s*(M[0xX])" -> StageTNM, 1 = StageT, 2 = StageN, 3 = StageM;
}


